import datetime
from typing import Union

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.utils.markdown import hbold

from loader import dp, bot, db
from keyboards import from_list_kb, divisions_cd, is_trainer_kb, ready_kb
from config import companies, divisions


async def finish_registration(call_or_message: Union[types.CallbackQuery, types.Message],
                              division: str, company: str = None, is_trainer: bool = False):
    user_id = call_or_message.from_user.id
    username = call_or_message.from_user.username
    date_of_registration = int(datetime.datetime.now().timestamp())

    await db.add_user(user_id, username, division, company, is_trainer, date_of_registration)

    await bot.send_message(user_id,
                           "–í –ø—Ä–æ–≥—Ä–∞–º–º—É –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω–æ –±–æ–ª–µ–µ 100 –ø—É–±–ª–∏–∫–∞—Ü–∏–π, "
                           "—Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Ç—ã –æ–∑–Ω–∞–∫–æ–º–∏—à—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 12 –Ω–µ–¥–µ–ª—å\n\n"
                           "üõé –ü—Ä–æ–≤–µ—Ä—å, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É —Ç–µ–±—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –£ —Ç–µ–±—è –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç—Å—è!",
                           reply_markup=ready_kb)


@dp.callback_query_handler(text="accept")
async def choose_division(call: types.CallbackQuery):
    await call.message.delete()
    await call.message.answer(f"{hbold('–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –¥–∏–≤–∏–∑–∏–æ–Ω.')} –ï—Å–ª–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å, "
                              "–Ω–µ –≤–∫–ª—é—á–µ–Ω–æ –≤ –¥–∏–≤–∏–∑–∏–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –Ω–∞–∂–º–∏ –Ω–∞ –ø—É–Ω–∫—Ç ¬´–î—Ä—É–≥–æ–π¬ª",
                              reply_markup=from_list_kb(divisions))


@dp.callback_query_handler(divisions_cd.filter())
async def choose_company_or_register(call: types.CallbackQuery, state: FSMContext, callback_data: dict):
    await call.message.delete()

    division_index = int(callback_data["choice"])
    division = divisions[division_index]

    if division == "–î—Ä—É–≥–æ–π":
        companies_text = "\n".join([f"{number}. {company}" for number, company in enumerate(companies, start=1)])

        await call.message.answer(f"{hbold('–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å (–æ—Ç–≤–µ—Ç–∏—Ç—å –Ω—É–∂–Ω–æ —Ü–∏—Ñ—Ä–æ–π).')} "
                                  "–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Ç—ã —è–≤–ª—è–µ—à—å—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º "
                                  "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –ê–∫–∞–¥–µ–º–∏–∏ –†–æ—Å–∞—Ç–æ–º–∞, –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Ü–∏—Ñ—Ä—É ¬´1¬ª\n\n"
                                  f"{companies_text}")
        await state.set_state("input_company")
    else:
        await finish_registration(call_or_message=call, division=division)


@dp.message_handler(state="input_company")
async def choose_role_or_register(message: types.Message, state: FSMContext):
    company_index = int(message.text) - 1
    if not 0 <= company_index < len(companies):
        raise ValueError

    company = companies[company_index]
    if company == "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –ê–∫–∞–¥–µ–º–∏—è –†–æ—Å–∞—Ç–æ–º–∞":
        await message.answer("–ó–¥–æ—Ä–æ–≤–æ, —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –≤ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –ê–∫–∞–¥–µ–º–∏–∏ –†–æ—Å–∞—Ç–æ–º–∞! "
                             "–†–∞—Å—Å–∫–∞–∂–∏, —è–≤–ª—è–µ—à—å—Å—è –ª–∏ —Ç—ã —Ç—Ä–µ–Ω–µ—Ä–æ–º?",
                             reply_markup=is_trainer_kb)
    else:
        await finish_registration(call_or_message=message, division="–î—Ä—É–≥–æ–π", company=company)

    await state.finish()


@dp.callback_query_handler(Text(startswith="trainer"))
async def choose_role(call: types.CallbackQuery):
    await call.message.delete()

    chosen_role = call.data.split("_")[1]
    if chosen_role == "yes":
        await finish_registration(call_or_message=call, division="–î—Ä—É–≥–æ–π", company="–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –ê–∫–∞–¥–µ–º–∏—è –†–æ—Å–∞—Ç–æ–º–∞",
                                  is_trainer=True)
    else:
        await finish_registration(call_or_message=call, division="–î—Ä—É–≥–æ–π", company="–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –ê–∫–∞–¥–µ–º–∏—è –†–æ—Å–∞—Ç–æ–º–∞")
